=========== learn.javascript.ru ============

ПЕРЕПРОЧИТАТЬ:
1.	https://learn.javascript.ru/array-iteration

2.	бинарный + например массива и числа к чему приводит?
		приводит к строке

3.		var a = new function() {
		  	this.b = 2;
		} //работает как конструктор
		alert(a.b);

4.	https://learn.javascript.ru/oop-errors

ES6:
	let - область видимости - блок {}, в цикле для каждой итерации создается своя новая переменная
	const - как let, только упадет если слева от оператора присваивания

	можно почти как в питоне:
		let [firstName, lastName] = ["Илья", "Кантор"];
		firstName; //"Илья"
	Остаток массива выдергиваем так:
		let [firstName, lastName, ...rest] = "Юлий Цезарь Император Рима".split(" ");
		rest; // ["Император", "Рима"]
	Можно ставить дефолтные значения:
		let [firstName="Гость", lastName="Анонимный"] = [];
	С объектами тоже прокатит:
		let options = {
		  title: "Меню",
		  width: 100,
		  height: 200
		};
		let {title, width, height} = options;
		title; //"Меню"
		let {width: w, height: h, title} = options;
		w; //100
		let {width: w, height: h, title, somevar = 100500} = options;
		somevar; //100500
	Нюанс:
		let a, b;
		{a, b} = {a:5, b:6};//Выражение внутри {} будет воспринято как блок кода
	  надо так:
	  	({a, b} = {a:5, b:6});
	Можно вкладывать конструкции друг в друга:
		let options = {
		  size: {
		    width: 100,
		    height: 200
		  },
		  items: ["Пончик", "Пирожное"]
		}
		let { title="Меню", size: {width, height}, items: [item1, item2] } = options;
		alert(`${title} ${width} ${height} ${item1} ${item2}`);// Меню 100 200 Пончик Пирожное
	Можно такое же делать в параметрах функций
		function showMenu({title, width, height}) {};

	В функции можно объявлять параметры по умолчанию. Тогда все, что undefined будет заменяться дефолтным значением

	Можно объявить вот так:
		function showName(firstName, lastName, ...rest)
	  это избавит от arguments

	... можно использовать и при вызове функции:
		let numbers = [2, 3, 15];
		Math.max(...numbers); //все равно что Math.max.apply(Math, numbers);

	У функций появилось поле name
		function func() {};
		func.name; //"func"
	  или даже
	  	let func = function() {}; //тоже будет name = "func"

	У функций, объявленных черех function declaration видимость теперь блочная

	=> :
		let inc = x => x+1; //все равно что let inc = function(x) {return x+1;};
		let sum = (a,b) => a + b;
		let getTime = () => "";
		let getTime = () => {f1(); f2(); return ""};
	  в таких функциях нет своего this (он берется из вызвавшего кода)
	  еще нет своего arguments

	Строки:
		` (обратная кавычка) - можно многострочные строки, вставлять выражения через ${varname}


============= YDKJS =================
